{
  "compilerOptions": {
    "allowJs": true,
    "target": "ESNext",
    "experimentalDecorators": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "sourceMap": true,
    "allowImportingTsExtensions": true,
    "lib": ["ESNext", "DOM", "DOM.Iterable"],
    "useDefineForClassFields": true, // https://vitejs.dev/guide/features.html#usedefineforclassfields
    // Interop constraints
    "isolatedModules": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "allowSyntheticDefaultImports": true,
    // END Interop constraints
    // Type checking
    "strict": true,
    "noImplicitOverride": true,
    "noFallthroughCasesInSwitch": true,
    // "noImplicitReturns": true, // Way too strict and not worth it?
    // "noUncheckedIndexedAccess": true, // Way too strict and not worth it?
    // "exactOptionalPropertyTypes": true, // Way too strict and not worth it?
    // END Type checking
    // Handled in eslint: disable them to prevent error duplication
    "allowUnreachableCode": true, // rule name: no-unreachable
    "allowUnusedLabels": true, // rule name: no-unused-labels
    "noUnusedLocals": false, // rule name: no-unused-vars, @typescript-eslint/no-unused-vars
    "noUnusedParameters": false, // rule name: no-unused-vars, @typescript-eslint/no-unused-vars: in `args` option
    // END Handled in eslint
    "jsx": "react-jsx", // React
    "skipLibCheck": true,
    "noEmit": true,
    "incremental": true,
    "composite": true,
    // This needs to be above root so that vscode will do auto-import correctly.
    // Basically, it will respect tsconfig.base.json's aliases in paths first,
    // because the full non-relative path would be longer.
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "/*": ["./public/*"]
    },
    "types": ["vite/client", "vite-plugin-svgr/client"]
  },
  "exclude": ["node_modules/*"],
  "include": ["**/*"]
}
